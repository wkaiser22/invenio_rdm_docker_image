"""
InvenioRDM settings for rdmkaiser project.

This file was automatically generated by 'invenio-cli init'.

For the full list of settings and their values, see
https://inveniordm.docs.cern.ch/reference/configuration/.
"""

from datetime import datetime
from invenio_i18n import lazy_gettext as _
from invenio_oauthclient.contrib.github import REMOTE_APP as GITHUB_REMOTE_APP
from invenio_oauthclient.views.client import auto_redirect_login

def _(x):  # needed to avoid start time failure with lazy strings
    return x

# Flask
# =====
# See https://flask.palletsprojects.com/en/1.1.x/config/

# Define the value of the cache control header `max-age` returned by the server when serving
# public files. Files will be cached by the browser for the provided number of seconds.
# See flask documentation for more information:
# https://flask.palletsprojects.com/en/2.1.x/config/#SEND_FILE_MAX_AGE_DEFAULT
SEND_FILE_MAX_AGE_DEFAULT = 300

# SECURITY WARNING: keep the secret key used in production secret!
# Do not commit it to a source code repository.
# TODO: Set
SECRET_KEY="CHANGE_ME"

# Since HAProxy and Nginx route all requests no matter the host header
# provided, the allowed hosts variable is set to localhost. In production it
# should be set to the correct host and it is strongly recommended to only
# route correct hosts to the application.
APP_ALLOWED_HOSTS = ['0.0.0.0', 'localhost', '127.0.0.1', '141.72.12.123']


# Flask-SQLAlchemy
# ================
# See https://flask-sqlalchemy.palletsprojects.com/en/2.x/config/

# TODO: Set
SQLALCHEMY_DATABASE_URI="postgresql+psycopg2://rdmkaiser:rdmkaiser@localhost/rdmkaiser"


# Invenio-App
# ===========
# See https://invenio-app.readthedocs.io/en/latest/configuration.html

APP_DEFAULT_SECURE_HEADERS = {
    'content_security_policy': {
        'default-src': [
            "'self'",
            'data:', # for fonts
            "'unsafe-inline'",  # for inline scripts and styles
            "blob:",
            # for pdf preview
            # Add your own policies here (e.g. analytics)
        ],
    },
    'content_security_policy_report_only': False,
    'content_security_policy_report_uri': None,
    'force_file_save': False,
    'force_https': True,
    'force_https_permanent': False,
    'frame_options': 'sameorigin',
    'frame_options_allow_from': None,
    'session_cookie_http_only': True,
    'session_cookie_secure': True,
    'strict_transport_security': True,
    'strict_transport_security_include_subdomains': True,
    'strict_transport_security_max_age': 31556926,  # One year in seconds
    'strict_transport_security_preload': False,
}


# Flask-Babel
# ===========
# See https://python-babel.github.io/flask-babel/#configuration

# Default locale (language)
BABEL_DEFAULT_LOCALE = 'en'
# Default time zone
BABEL_DEFAULT_TIMEZONE = 'Europe/Zurich'


# Invenio-I18N
# ============
# See https://invenio-i18n.readthedocs.io/en/latest/configuration.html

# Other supported languages (do not include BABEL_DEFAULT_LOCALE in list).
I18N_LANGUAGES = [
    # ('de', _('German')),
    # ('tr', _('Turkish')),
]


# Invenio-Theme
# =============
# See https://invenio-theme.readthedocs.io/en/latest/configuration.html

# Name used in header and UI
THEME_SITENAME = "rdmkaiser"
# Frontpage title
THEME_FRONTPAGE_TITLE = "rdmkaiser"
# Header logo
THEME_LOGO = 'images/invenio-rdm.svg'


# Invenio-App-RDM
# ===============
# See https://github.com/inveniosoftware/invenio-app-rdm/blob/master/invenio_app_rdm/config.py

# Instance's theme entrypoint file. Path relative to the ``assets/`` folder.
INSTANCE_THEME_FILE = './less/theme.less'

# Email address for administrator emails (like file checksum alerts)
APP_RDM_ADMIN_EMAIL_RECIPIENT = "info@rdmkaiser.com"

# Default values for the deposit form
APP_RDM_DEPOSIT_FORM_DEFAULTS = {
    "publication_date": lambda: datetime.now().strftime("%Y-%m-%d"),
    "rights": [
        {
            "id": "cc-by-4.0",
            "title": "Creative Commons Attribution 4.0 International",
            "description": ("The Creative Commons Attribution license allows "
                            "re-distribution and re-use of a licensed work "
                            "on the condition that the creator is "
                            "appropriately credited."),
            "link": "https://creativecommons.org/licenses/by/4.0/legalcode",
        }
    ],
    "publisher": "rdmkaiser",
}

APP_RDM_DEPOSIT_FORM_AUTOCOMPLETE_NAMES = 'search' # "search_only" or "off"

# Invenio-Files-Rest
# ==================
FILES_REST_STORAGE_FACTORY='invenio_s3.s3fs_storage_factory'

# Invenio-S3
# ==========
S3_ENDPOINT_URL='http://141.72.13.53:9000/'
S3_ACCESS_KEY_ID='SEiPdoTIUPXK2zd70s7h'
S3_SECRET_ACCESS_KEY='HiHEFwJOeMPz7SqIxXT8sZjFSVv5e6VVvJCWgYwJ'


#S3_ACCESS_KEY_ID='minioadmin'
#S3_SECRET_ACCESS_KEY='minioadmin'


# Invenio-S3
# ==========
#S3_ENDPOINT_URL='http://localhost:9000/'
#S3_ACCESS_KEY_ID='CHANGE_ME'
#S3_SECRET_ACCESS_KEY='CHANGE_ME'

# Allow S3 endpoint in the CSP rules
APP_DEFAULT_SECURE_HEADERS['content_security_policy']['default-src'].append(
    S3_ENDPOINT_URL
)

# Invenio-Records-Resources
# =========================
# See https://github.com/inveniosoftware/invenio-records-resources/blob/master/invenio_records_resources/config.py

# TODO: Set with your own hostname when deploying to production
SITE_UI_URL = "https://141.72.12.123"

SITE_API_URL = "https://141.72.12.123/api"

# Invenio-RDM-Records
# ===================
# See https://inveniordm.docs.cern.ch/customize/dois/
DATACITE_ENABLED = False
DATACITE_USERNAME = ""
DATACITE_PASSWORD = ""
DATACITE_PREFIX = ""
DATACITE_TEST_MODE = True
DATACITE_DATACENTER_SYMBOL = ""

# Authentication - Invenio-Accounts and Invenio-OAuthclient
# =========================================================
# See: https://inveniordm.docs.cern.ch/customize/authentication/

# Invenio-Accounts
# ----------------
# See https://github.com/inveniosoftware/invenio-accounts/blob/master/invenio_accounts/config.py
ACCOUNTS_LOCAL_LOGIN_ENABLED = True  # enable local login
SECURITY_REGISTERABLE = True  # local login: allow users to register
SECURITY_RECOVERABLE = True  # local login: allow users to reset the password
SECURITY_CHANGEABLE = True  # local login: allow users to change psw
SECURITY_CONFIRMABLE = True  # local login: users can confirm e-mail address
SECURITY_LOGIN_WITHOUT_CONFIRMATION = True # require users to confirm email before being able to login



# Invenio-OAuthclient
# ===================
#_keycloak_helper = KeycloakSettingsHelper(
#    title="CERN",
#    description="CERN SSO authentication",
#    base_url="https://auth.cern.ch/",
#    realm="cern",
#    app_key="CERN_APP_CREDENTIALS"
#)
#OAUTHCLIENT_CERN_REALM_URL = _keycloak_helper.realm_url
#OAUTHCLIENT_CERN_USER_INFO_URL = _keycloak_helper.user_info_url
#OAUTHCLIENT_CERN_VERIFY_EXP = True
#OAUTHCLIENT_CERN_VERIFY_AUD = False



#OAUTHCLIENT_LOGIN_USER_TEMPLATE = "invenio_login/login_user.html"





# Invenio-OAuthclient
# -------------------
# See https://github.com/inveniosoftware/invenio-oauthclient/blob/master/invenio_oauthclient/config.py

#from invenio_oauthclient.contrib.settings import OAuthSettingsHelper


#class BwIDMOAuthSettingsHelper(OAuthSettingsHelper):
#    def __init__(self):
#        super().__init__(
#            title="bwIDM",
#            description="Anmeldung über bwIDM",
#            base_url="https://login.bwidm.de/auth/realms/bwidm/protocol/openid-connect/",  # Basis-URL des OAuth2-Endpunkts (anpassen!)
#            app_key="BWIDM_APP_CREDENTIALS",       # Verweist auf BWIDM_APP_CREDENTIALS unten
#            access_token_url="https://login.bwidm.de/auth/realms/bwidm/protocol/openid-connect/token",      # muss ggf. angepasst werden
#            authorize_url="https://login.bwidm.de/auth/realms/bwidm/protocol/openid-connect/auth",     # muss ggf. angepasst werden
#        )

#    def get_handlers(self):
#        return dict(
#            authorized_handler='invenio_oauthclient.handlers:authorized_signup_handler',
#            disconnect_handler=self.my_disconnect_handler,
#            signup_handler=dict(
#                info=self.my_account_info,
#                setup=self.my_account_setup,
#                view='invenio_oauthclient.handlers:signup_handler',
#            )
#        )

#    def get_rest_handlers(self):
#        return dict(
#            authorized_handler='invenio_oauthclient.handlers.rest:authorized_signup_handler',
#            disconnect_handler=self.my_disconnect_handler,
#            signup_handler=dict(
#                info=self.my_account_info,
#                setup=self.my_account_setup,
#                view='invenio_oauthclient.handlers.rest:signup_handler',
#            ),
#            response_handler='invenio_oauthclient.handlers.rest:default_remote_response_handler',
#            authorized_redirect_url='/',
#            disconnect_redirect_url='/',
#            signup_redirect_url='/',
#            error_redirect_url='/'
#        )

#    def my_disconnect_handler(self, *args, **kwargs):
        # optional: Logging oder Cleanup
#        pass

#    def my_account_info(self, remote, resp):
        # Hier die Nutzerdaten auslesen und ggf. Einschränkungen machen
#        email = resp.get("email", "").lower()
#        if not email.endswith("@uni-xyz.de"):  # ODER eine Liste erlaubter Domains
#            from flask import flash
#            from flask_babel import _
#            from werkzeug.exceptions import abort
#            flash(_("Nur bestimmte E-Mail-Domains sind zugelassen."), category="danger")
#            abort(401)

#        return {
#            "user": {
#                "email": email,
#                "profile": {
#                    "full_name": resp.get("name", "")
#                }
#            }
#        }

#    def my_account_setup(self, remote, token, resp):
#        """Optional weitere Schritte nach dem Login."""
#        return {}


#myOAuthHelper = BwIDMOAuthSettingsHelper()

#OAUTHCLIENT_REMOTE_APPS = dict(
#    bwidm=myOAuthHelper.remote_app,
#)

#BWIDM_APP_CREDENTIALS = dict(
#    consumer_key="<my-key>",
#    consumer_secret="<my-secret>",
#)


#OAUTHCLIENT_REMOTE_APPS = dict(
#    github=myGitHubHelper.remote_app,
#)
# Ganz oben in invenio.cfg
#import sys
#sys.path.insert(0, "/home/ubuntu/Invenio-Projects/demo/theme_fdm_dhbw")

#from rdmkaiser.oauth.github import GitHubOAuthSettingsHelper

from invenio_oauthclient.contrib.settings import OAuthSettingsHelper
# Importiere die benötigten Handler, falls du sie in deinen Funktionen verwendest
# from invenio_oauthclient.handlers import authorized_signup_handler, disconnect_handler
# from flask import current_app, redirect, url_for
# from flask_security import current_user
# from datetime import datetime, timedelta
# import logging
# import requests

# log = logging.getLogger(__name__) # Nur wenn du Logging verwendest

class MyOAuthSettingsHelper(OAuthSettingsHelper):
    def __init__(self):
        super().__init__(
            title="GitHub",
            description="Login via GitHub Account",
            base_url="https://github.com/",
            app_key="MY_APP_CREDENTIALS",
            access_token_url="https://github.com/login/oauth/access_token",
            authorize_url="https://github.com/login/oauth/authorize",
        )

    # DIESE METHODEN MÜSSEN DIREKT UNTERHALB DER KLASSENDEKLARATION SEIN,
    # NICHT INNERHALB VON __init__
    def get_handlers(self):
        return dict(
            authorized_handler='invenio_oauthclient.handlers'
                               ':authorized_signup_handler',
            disconnect_handler=my_disconnect_handler, # <-- Beachte: Hier werden die externen Funktionen referenziert
            signup_handler=dict(
                info=my_account_info, # <-- Beachte: Hier werden die externen Funktionen referenziert
                setup=my_account_setup, # <-- Beachte: Hier werden die externen Funktionen referenziert
                view='invenio_oauthclient.handlers:signup_handler',
            )
            # Du hast 'token_getter_handler' in deiner vorherigen Version hier gehabt.
            # Wenn du es brauchst, füge es hinzu und sorge dafür, dass `self.github_token_getter` existiert.
            # token_getter_handler=self.github_token_getter,
        )

    def get_rest_handlers(self):
        return dict(
            authorized_handler='invenio_oauthclient.handlers.rest'
                               ':authorized_signup_handler',
            disconnect_handler=my_disconnect_handler, # <-- Beachte: Hier werden die externen Funktionen referenziert
            signup_handler=dict(
                info=my_account_info, # <-- Beachte: Hier werden die externen Funktionen referenziert
                setup=my_account_setup, # <-- Beachte: Hier werden die externen Funktionen referenziert
                view='invenio_oauthclient.handlers.rest:signup_handler',
            ),
            response_handler='invenio_oauthclient.handlers.rest'
                             ':default_remote_response_handler',
            authorized_redirect_url='/',
            disconnect_redirect_url='/',
            signup_redirect_url='/',
            error_redirect_url='/'
        )
    
    # Wenn diese Funktionen als Methoden der Klasse gedacht sind, MÜSSEN sie `self` als erstes Argument haben
    # UND sie müssen hier *direkt* unterhalb der Klasse eingerückt sein, nicht noch eine Ebene tiefer.
    # Da du sie als `my_disconnect_handler` ohne `self.` in den Handlern referenzierst,
    # gehe ich davon aus, dass sie *externe Funktionen* sind, die *außerhalb* der Klasse definiert werden müssen.
    # Daher entferne ich sie hier aus der Klasse.
    # Wenn sie Methoden sein sollen, müssten sie so aussehen:
    # def my_disconnect_handler(self, remote, *args, **kwargs):
    #     pass
    # und dann als `disconnect_handler=self.my_disconnect_handler` referenziert werden.
    # Aber deine aktuelle Referenzierung in `get_handlers` passt nicht dazu.

# Diese Funktionen müssen AUSSERHALB der Klasse definiert werden,
# da sie in `get_handlers` und `get_rest_handlers` ohne `self.` referenziert werden.
# Und sie müssen die korrekten Parameter akzeptieren, die Invenio ihnen übergibt.

def my_disconnect_handler(remote, *args, **kwargs):
    pass # Füge hier deine Logik ein, z.B. disconnect_handler(remote, *args, **kwargs)

def my_account_info(remote, resp):
    pass # Füge hier deine Logik ein, um Benutzerdaten abzurufen

def my_account_setup(remote, token, resp):
    pass # Füge hier deine Logik für die Kontoeinrichtung ein

# Du hattest self.github_token_getter in deinem vorherigen Code.
# Wenn es eine Methode der Klasse sein soll, dann muss es in der Klasse definiert werden
# mit `self`. Wenn es eine externe Funktion ist, dann ohne `self` und außerhalb der Klasse.
# Basierend auf `self.github_token_getter` gehe ich davon aus, dass es eine Methode sein soll.
# Daher musste ich es in der vorherigen Antwort in die Klasse zurückschieben.
# Wenn du es hier nicht siehst, bedenke, dass es in der Klasse definiert sein muss,
# wenn du `self.github_token_getter` verwendest.

# --- Instanziierung und Konfiguration außerhalb der Klasse ---
myOAuthHelper = MyOAuthSettingsHelper()

OAUTHCLIENT_REMOTE_APPS = dict(
    myoauth=myOAuthHelper.remote_app,
)

MY_APP_CREDENTIALS = dict(
    consumer_key="ov23liYzQEwEz6RYhC5k",
    consumer_secret="cb61993f307bd4587e10a2c953a36c71a7e23ae9",
)

# Zusätzliche Einstellungen
# OAUTHCLIENT_AUTHORIZED_REDIRECT_URL = '/'
# OAUTHCLIENT_DISCONNECTED_REDIRECT_URL = '/'
# OAUTHCLIENT_SIGNUP_REDIRECT_URL = '/'
# OAUTHCLIENT_ERROR_REDIRECT_URL = '/'

# OAUTHCLIENT_ACCOUNT_INFO_AUTO_COPY = True
# OAUTHCLIENT_CREATE_USERS = True

# OAUTHCLIENT_CONFIG = dict(
#     debug=True,
#     'remote_apps': {
#         'myoauth': {
#             'debug': True
#         }
#     }
# )


# Setup Github Authentication
# ===========================

#GITHUB_APP_CREDENTIALS = dict(
#    consumer_key="Ov23liYzQEwEz6RYhC5k",
#    consumer_secret="cb61993f307bd4587e10a2c953a36c71a7e23ae9",
#)

#OAUTHCLIENT_REMOTE_APPS = dict(
#    github=GITHUB_REMOTE_APP,
#)

#OAUTHCLIENT_REMOTE_APPS = {
#   "github": GITHUB_REMOTE_APP,
#}  # configure external login providers

#GITHUB_APP_CREDENTIALS = {
#    "consumer_key": "Ov23liYzQEwEz6RYhC5k",
#    "consumer_secret": "cb61993f307bd4587e10a2c953a36c71a7e23ae9",
#}


from invenio_oauthclient.views.client import auto_redirect_login
ACCOUNTS_LOGIN_VIEW_FUNCTION = auto_redirect_login  # autoredirect to external login if enabled
OAUTHCLIENT_AUTO_REDIRECT_TO_EXTERNAL_LOGIN = False  # autoredirect to external login

# Invenio-UserProfiles
# --------------------
USERPROFILES_READ_ONLY = True  # allow users to change profile info (name, email, etc...)

# OAI-PMH
# =======
# See https://github.com/inveniosoftware/invenio-oaiserver/blob/master/invenio_oaiserver/config.py

OAISERVER_ID_PREFIX = "rdmkaiser.com"
"""The prefix that will be applied to the generated OAI-PMH ids."""
OAISERVER_ADMIN_EMAILS = [
    "info@rdmkaiser.com",
]

# Invenio-Search
# --------------

SEARCH_INDEX_PREFIX = "rdmkaiser-"

# Invenio-Users-Resources
# -----------------------

USERS_RESOURCES_ADMINISTRATION_ENABLED = True
"""Enable the user administration"""
